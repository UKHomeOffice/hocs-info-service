---
kind: pipeline
type: kubernetes
name: build
trigger:
  event:
    - push
  branch:
    exclude:
      - main

environment:
  KEYCLOAK_SERVER_ROOT: http://keycloak:8080
  KEYCLOAK_USER: admin
  KEYCLOAK_PASSWORD: password1

services:
  - name: keycloak
    image: jboss/keycloak
    environment:
      DB_VENDOR: h2

  - name: postgres
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: dev

  - name: localstack
    image: quay.io/ukhomeofficedigital/localstack
    environment:
      SERVICES: sqs, sns
      DEFAULT_REGION: eu-west-2

steps:
  - name: setup localstack
    image: quay.io/ukhomeofficedigital/localstack
    commands:
      - cd config/localstack
      - ./1-setup-sqs.sh
      - ./2-setup-sns.sh
    depends_on:
      - clone

  - name: wait for keycloak
    image: quay.io/ukhomeofficedigital/hocs-docker-tools
    commands:
      - >
        until
          $(curl \
          --output /dev/null \
          --silent --head --fail \
          $${KEYCLOAK_SERVER_ROOT}/auth/realms/master/.well-known/openid-configuration);
        do
          echo "waiting for keycloak"
          sleep 1
        done
      - >
        export TKN=$(curl -X POST \
          'http://keycloak:8080/auth/realms/master/protocol/openid-connect/token' \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d username=$${KEYCLOAK_USER} \
          -d password=$${KEYCLOAK_PASSWORD} \
          -d grant_type=password \
          -d client_id=admin-cli \
          | jq -r '.access_token')
      - >
        curl -vX POST http://keycloak:8080/auth/admin/realms \
          -d @keycloak/local-realm.json \
          -H "Authorization: Bearer $${TKN}" \
          -H "Content-Type: application/json"
    depends_on:
      - clone

  - name: test project
    image: quay.io/ukhomeofficedigital/hocs-base-image-build:1.0.5
    environment:
      SPRING_PROFILES_ACTIVE: "development, local, test"
      DB_HOST: postgres
      AWS_LOCAL_HOST: localstack
    commands:
      - ./gradlew clean build --no-daemon
    depends_on:
      - wait for keycloak
      - setup localstack

  - name: sonar-scanner
    image: quay.io/ukhomeofficedigital/sonar-scanner
    commands:
      - sonar-scanner -Dsonar.projectVersion="$(git rev-parse --abbrev-ref HEAD)"
    depends_on:
      - test project

  - name: build & push
    image: plugins/docker
    environment:
      DOCKER_PASSWORD:
        from_secret: QUAY_ROBOT_TOKEN
      DOCKER_USERNAME: ukhomeofficedigital+hocs_quay_robot
    settings:
      registry: quay.io
      repo: quay.io/ukhomeofficedigital/hocs-info-service
      tags:
        - ${DRONE_COMMIT_SHA}
    depends_on:
      - test project

---
kind: pipeline
type: kubernetes
name: deploy
trigger:
  event:
    - promote
  target:
    exclude:
      - restart*

steps:
  - name: fetch and checkout
    image: alpine/git
    commands:
      - git fetch --tags
      - git checkout $${VERSION}

  - name: deploy to cs-qa
    image: quay.io/ukhomeofficedigital/kd
    environment:
      ENVIRONMENT: cs-qa
      KUBE_TOKEN:
        from_secret: hocs_info_service_cs_qa
    commands:
      - cd kube
      - ./deploy.sh
    depends_on:
      - fetch and checkout
    when:
      target:
        - release

  - name: deploy to wcs-qa
    image: quay.io/ukhomeofficedigital/kd
    environment:
      ENVIRONMENT: wcs-qa
      KUBE_TOKEN:
        from_secret: hocs_info_service_wcs_qa
    commands:
      - cd kube
      - ./deploy.sh
    depends_on:
      - fetch and checkout
    when:
      target:
        - release

  - name: deployment to not-prod
    image: quay.io/ukhomeofficedigital/kd
    environment:
      ENVIRONMENT: ${DRONE_DEPLOY_TO}
      KUBE_TOKEN:
        from_secret: hocs_info_service_${DRONE_DEPLOY_TO/-/_}
    commands:
      - cd kube
      - ./deploy.sh
    depends_on:
      - fetch and checkout
    when:
      target:
        exclude:
          - release
          - "*-prod"

  - name: deploy to prod
    image: quay.io/ukhomeofficedigital/kd
    environment:
      ENVIRONMENT: ${DRONE_DEPLOY_TO}
      KUBE_TOKEN:
        from_secret: hocs_info_service_${DRONE_DEPLOY_TO/-/_}
    commands:
      - cd kube
      - ./deploy.sh
    depends_on:
      - fetch and checkout
    when:
      target:
        - "*-prod"

---
kind: pipeline
type: kubernetes
name: build tag
trigger:
  event:
    - tag
  branch:
    - main
    - support/*
concurrency:
  limit: 1

environment:
  KEYCLOAK_SERVER_ROOT: http://keycloak:8080
  KEYCLOAK_USER: admin
  KEYCLOAK_PASSWORD: password1

services:
  - name: keycloak
    image: jboss/keycloak
    environment:
      DB_VENDOR: h2

  - name: postgres
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: dev

  - name: localstack
    image: quay.io/ukhomeofficedigital/localstack
    environment:
      SERVICES: sqs, sns
      DEFAULT_REGION: eu-west-2

steps:
  - name: setup localstack
    image: quay.io/ukhomeofficedigital/localstack
    commands:
      - cd config/localstack
      - ./1-setup-sqs.sh
      - ./2-setup-sns.sh
    depends_on:
      - clone

  - name: wait for keycloak
    image: quay.io/ukhomeofficedigital/hocs-docker-tools
    commands:
      - >
        until
          $(curl \
          --output /dev/null \
          --silent --head --fail \
          $${KEYCLOAK_SERVER_ROOT}/auth/realms/master/.well-known/openid-configuration);
        do
          echo "waiting for keycloak"
          sleep 1
        done
      - >
        export TKN=$(curl -X POST \
          'http://keycloak:8080/auth/realms/master/protocol/openid-connect/token' \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d username=$${KEYCLOAK_USER} \
          -d password=$${KEYCLOAK_PASSWORD} \
          -d grant_type=password \
          -d client_id=admin-cli \
          | jq -r '.access_token')
      - >
        curl -vX POST http://keycloak:8080/auth/admin/realms \
          -d @keycloak/local-realm.json \
          -H "Authorization: Bearer $${TKN}" \
          -H "Content-Type: application/json"
    depends_on:
      - clone

  - name: test project
    image: quay.io/ukhomeofficedigital/hocs-base-image-build:1.0.5
    environment:
      SPRING_PROFILES_ACTIVE: "development, local, test"
      DB_HOST: postgres
      AWS_LOCAL_HOST: localstack
    commands:
      - ./gradlew clean build --no-daemon
    depends_on:
      - wait for keycloak
      - setup localstack

  - name: build & push tag main
    image: plugins/docker
    settings:
      registry: quay.io
      repo: quay.io/ukhomeofficedigital/hocs-info-service
      tags:
        - ${DRONE_TAG}
        - ${DRONE_COMMIT_SHA}
        - latest
    environment:
      DOCKER_PASSWORD:
        from_secret: QUAY_ROBOT_TOKEN
      DOCKER_USERNAME: ukhomeofficedigital+hocs_quay_robot
    depends_on:
      - test project
    when:
      branch:
        - main

  - name: build & push tag
    image: plugins/docker
    settings:
      registry: quay.io
      repo: quay.io/ukhomeofficedigital/hocs-info-service
      tags:
        - ${DRONE_TAG}
        - ${DRONE_COMMIT_SHA}
    environment:
      DOCKER_PASSWORD:
        from_secret: QUAY_ROBOT_TOKEN
      DOCKER_USERNAME: ukhomeofficedigital+hocs_quay_robot
    depends_on:
      - test project
    when:
      branch:
        - support/*

---
kind: pipeline
type: kubernetes
name: tag data
trigger:
  event:
    - tag
  branch:
    - main
depends_on:
  - build tag

clone:
  disable: true

steps:
  - name: env-file
    image: alpine:latest
    commands:
      - echo HOCS_INFO_SERVICE_DATA_VERSION=$${DRONE_TAG} > info-service-data-version.env

  - name: CS downstream build
    image: plugins/downstream
    settings:
      server: https://drone-gh.acp.homeoffice.gov.uk
      deploy: cs-qa
      fork: false
      last_successful: true
      token:
        from_secret: DRONE_TOKEN
      params:
        - info-service-data-version.env
      repositories:
        - UKHomeOffice/hocs-data@main
    depends_on:
      - env-file

  - name: WCS downstream build
    image: plugins/downstream
    settings:
      server: https://drone-gh.acp.homeoffice.gov.uk
      deploy: wcs-qa
      fork: false
      last_successful: true
      token:
        from_secret: DRONE_TOKEN
      params:
        - info-service-data-version.env
      repositories:
        - UKHomeOffice/hocs-data-wcs@main
    depends_on:
      - env-file

---
kind: pipeline
type: kubernetes
name: deploy tag
trigger:
  event:
    - tag
  branch:
    - main
depends_on:
  - tag data

steps:
  - name: deploy to cs-dev
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - cd kube
      - ./deploy.sh
    environment:
      ENVIRONMENT: cs-dev
      KUBE_TOKEN:
        from_secret: hocs_info_service_cs_dev
      KUBE_SERVER: https://kube-api-notprod.notprod.acp.homeoffice.gov.uk
      VERSION: "${DRONE_TAG}"
    depends_on:
      - clone

  - name: deploy to wcs-dev
    image: quay.io/ukhomeofficedigital/kd
    commands:
      - cd kube
      - ./deploy.sh
    environment:
      ENVIRONMENT: wcs-dev
      KUBE_TOKEN:
        from_secret: hocs_info_service_wcs_dev
      KUBE_SERVER: https://kube-api-notprod.notprod.acp.homeoffice.gov.uk
      VERSION: "${DRONE_TAG}"
    depends_on:
      - clone
