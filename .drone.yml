---
kind: pipeline
type: kubernetes
name: build

environment:
  KEYCLOAK_SERVER_ROOT: http://keycloak:8080
  KEYCLOAK_USER: admin
  KEYCLOAK_PASSWORD: password1

services:
  - name: keycloak
    image: jboss/keycloak
    environment:
      DB_VENDOR: h2
  - name: postgres
    image: quay.io/ukhomeofficedigital/postgres-alpine
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: dev

steps:
  - name: wait for keycloak
    image: quay.io/ukhomeofficedigital/hocs-docker-tools
    commands:
      - >
        until
          $(curl \
          --output /dev/null \
          --silent --head --fail \
          $${KEYCLOAK_SERVER_ROOT}/auth/realms/master/.well-known/openid-configuration); 
        do
          echo "waiting for keycloak"
          sleep 1
        done
      - >
        export TKN=$(curl -X POST \
          'http://keycloak:8080/auth/realms/master/protocol/openid-connect/token' \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d username=$${KEYCLOAK_USER} \
          -d password=$${KEYCLOAK_PASSWORD} \
          -d grant_type=password \
          -d client_id=admin-cli \
          | jq -r '.access_token')
      - >
        curl -vX POST http://keycloak:8080/auth/admin/realms \
          -d @keycloak/local-realm.json \
          -H "Authorization: Bearer $${TKN}" \
          -H "Content-Type: application/json"

  - name: build project
    image: quay.io/ukhomeofficedigital/openjdk11:v11.0.5_10
    commands:
      - ./gradlew assemble --no-daemon
    depends_on:
      - wait for keycloak

  - name: test project
    image: quay.io/ukhomeofficedigital/openjdk11:v11.0.5_10
    environment:
      SPRING_PROFILES_ACTIVE: "development, local, test"
      DB_HOST: postgres
      AWS_LOCAL_HOST: localstack
    commands:
      - ./gradlew check --no-daemon
    depends_on:
      - build project

  - name: sonar-scanner
    image: quay.io/ukhomeofficedigital/sonar-scanner:v3.0.2
    depends_on:
      - build project

  - name: build & push
    image: plugins/docker
    environment:
      DOCKER_PASSWORD:
        from_secret: QUAY_ROBOT_TOKEN
      DOCKER_USERNAME: ukhomeofficedigital+hocs_quay_robot
    settings:
      registry: quay.io
      repo: quay.io/ukhomeofficedigital/hocs-info-service
      tags:
        - build_${DRONE_BUILD_NUMBER}
        - ${DRONE_COMMIT_SHA}
        - branch-${DRONE_COMMIT_BRANCH/\//_}
    depends_on:
      - test project

  - name: build & push latest
    image: plugins/docker
    environment:
      DOCKER_PASSWORD:
        from_secret: QUAY_ROBOT_TOKEN
      DOCKER_USERNAME: ukhomeofficedigital+hocs_quay_robot
    settings:
      registry: quay.io
      repo: quay.io/ukhomeofficedigital/hocs-info-service
      tags:
        - latest
    when:
      branch:
        - main
    depends_on:
      - test project

trigger:
  event:
    - push

---
kind: pipeline
type: kubernetes
name: deploy
depends_on:
  - build
trigger:
  event:
    exclude:
      - pull_request
      - tag
  target:
    exclude:
      - restart*

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

environment:
  DOCKER_HOST: tcp://docker:2375

steps:
  - name: clone kube repo
    image: plugins/git
    commands:
      - git clone https://github.com/UKHomeOffice/kube-hocs-info-service.git

  - name: wait for docker
    image: docker
    commands:
      - n=0; until docker stats --no-stream; do echo "Waiting for Docker $n"; n=$((n +1)); sleep 1; done
    when:
      event:
        - promote
      target:
        - release

  - name: env-file
    image: alpine:latest
    commands:
      - echo HOCS_INFO_SERVICE_DATA_VERSION=epicCMS_$VERSION > info-service-data-version.env
    when:
      event:
        - promote
      target:
        - hocs-qax

  - name: hocs-qax downstream build
    image: plugins/downstream
    settings:
      server: https://drone-gh.acp.homeoffice.gov.uk
      deploy: hocs-qax
      fork: false
      last_successful: true
      token:
        from_secret: DRONE_TOKEN
      params:
        - info-service-data-version.env
      repositories:
        - UKHomeOffice/hocs-data@epic/HOCS-COMP
    depends_on:
      - env-file
    when:
      event:
        - promote
      target:
        - hocs-qax

  ### STEP TO CLEAR SCHEMA HERE OR SOMETHING

  - name: deploy to hocs qax
    image: quay.io/ukhomeofficedigital/kd:v1.16.0
    environment:
      ENVIRONMENT: hocs-qax
      KUBE_TOKEN:
        from_secret: hocs_info_service_hocs_qax
      HOCS_INFO_SERVICE_DATA_VERSION: epicCMS_${VERSION}
    commands:
      - cd kube-hocs-info-service
      - ./deploy.sh
    depends_on:
      - clone kube repo
      - hocs-qax downstream build
    when:
      event:
        - promote
      target:
        - hocs-qax

---
kind: pipeline
type: kubernetes
name: restart dev
trigger:
  event:
    - promote
  target:
    include:
      - restart*

# This pipeline allows the downstream data repos to require a restart
# on our dev environments to force info-service to repull :latest
# separately to our main deployment pipeline

steps:
  - name: clone kube repo
    image: plugins/git
    commands:
      - git clone https://github.com/UKHomeOffice/kube-hocs-info-service.git

  - name: restart cs-dev
    image: quay.io/ukhomeofficedigital/kd:v1.16.0
    commands:
      - cd kube-hocs-info-service
      - ./restart.sh
    environment:
      ENVIRONMENT: cs-dev
      KUBE_TOKEN:
        from_secret: hocs_info_service_cs_dev
    depends_on:
      - clone kube repo
    when:
      target:
        - restart
        - restart-cs

  - name: restart wcs-dev
    image: quay.io/ukhomeofficedigital/kd:v1.16.0
    commands:
      - cd kube-hocs-info-service
      - ./restart.sh
    environment:
      ENVIRONMENT: wcs-dev
      KUBE_TOKEN:
        from_secret: hocs_info_service_wcs_dev
    depends_on:
      - clone kube repo
    when:
      target:
        - restart
        - restart-wcs
